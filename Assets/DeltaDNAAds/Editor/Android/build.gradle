// DO NOT EDIT FILE MANUALLY

apply plugin: 'com.android.application'

// we're not actually building anything so we can be relaxed in what
// tools we use and thus can pick anything that may already be installed
def findBuildToolsVersion = {
    def files = file("${android.getSdkDirectory().getAbsolutePath()}/build-tools/")
            ?.list()

    if (files) {
        files.last()
    } else {
        throw new GradleException('Failed to find Android SDK build tools')
    }
}
def findCompileSdkVersion = {
    def files = file("${android.getSdkDirectory().getAbsolutePath()}/platforms/")
            ?.list({ dir, name -> name ==~ /android-\d+/ })

    if (files) {
        files.last().replace('android-', '').toInteger()
    } else {
        throw new GradleException('Failed to find Android SDK platform')
    }
}

def version = '1.3.0'
def smartads = hasProperty('smartads')
def network = { network ->
    dependencies.compile("com.deltadna.android:deltadna-smartads-provider-${network}:$version")
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://jcenter.bintray.com' }
    maven { url "http://deltadna.bintray.com/android" }
    maven { url 'http://edinlin01:8082/artifactory/libs-snapshot-local' }
}

android {
    buildToolsVersion findBuildToolsVersion()
    compileSdkVersion findCompileSdkVersion()
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

    // included as part of smartads dependencies
    exclude group: 'com.android.support', module: 'support-annotations'
    exclude group: 'com.android.support', module: 'support-compat'
    exclude group: 'com.android.support', module: 'support-core-ui'
    exclude group: 'com.android.support', module: 'support-core-utils'
    exclude group: 'com.android.support', module: 'support-fragment'
    exclude group: 'com.android.support', module: 'support-media-compat'
    exclude group: 'com.android.support', module: 'support-v4'
    exclude group: 'com.google.android.gms', module: 'play-services-ads'
    exclude group: 'com.google.android.gms', module: 'play-services-analytics'
    exclude group: 'com.google.android.gms', module: 'play-services-appindexing'
    exclude group: 'com.google.android.gms', module: 'play-services-base'
    exclude group: 'com.google.android.gms', module: 'play-services-basement'
    exclude group: 'com.google.firebase', module: 'firebase-ads'
}

dependencies {
    network('adcolony')
    network('admob')
    network('amazon')
    network('applovin')
    network('chartboost')
    network('flurry')
    network('inmobi')
    network('mopub')
    network('thirdpresence')
    network('unity')
    network('vungle')

    if (smartads) {
        compile "com.deltadna.android:deltadna-smartads-core:$version"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

task clean(type: Delete) {
    delete '../../Plugins/Android'
}

task download(type: Copy) {
    from configurations.compile
    into '../../Plugins/Android'
}
